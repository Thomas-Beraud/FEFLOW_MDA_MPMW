window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Functions", "modulename": "Functions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Ensemble_Assimilation", "modulename": "Functions.Ensemble_Assimilation", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Ensemble_Assimilation.mrdiv", "modulename": "Functions.Ensemble_Assimilation", "qualname": "mrdiv", "type": "function", "doc": "<p>Solve a linear matrix equation, or system of linear scalar equations.\nComputes the \"exact\" solution, x, of the well-determined, i.e., full rank, linear matrix equation Ax = b.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>b (float):</strong>  values</li>\n<li><strong>A (float):</strong>  matrix like</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Solution to the system A x = b. Returned shape is identical to b.</p>\n</blockquote>\n", "parameters": ["b", "A"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.rmse", "modulename": "Functions.Ensemble_Assimilation", "qualname": "rmse", "type": "function", "doc": "<p>Compute the RMSE between two arrays</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>predictions (float):</strong>  array of predictions</li>\n<li><strong>targets (float):</strong>  array of targets</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RMSE (float)</p>\n</blockquote>\n", "parameters": ["predictions", "targets"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.get_stats", "modulename": "Functions.Ensemble_Assimilation", "qualname": "get_stats", "type": "function", "doc": "<p>Compute statistics on an array</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>x (float):</strong>  array of values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>median, p25, p75, STD of x</p>\n</blockquote>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.compute_worst_individual", "modulename": "Functions.Ensemble_Assimilation", "qualname": "compute_worst_individual", "type": "function", "doc": "<p>Compute the worst model in an ensemble of models</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>measured (Observation):</strong>  Observation class holding every measured Well</li>\n<li><strong>observations (Observation):</strong>  Observation class holding every observed Well in the model</li>\n<li><strong>min_ (float):</strong>  Lower bound of data to keep to compute the RMSE. [0,1] &lt; max_</li>\n<li><strong>max_ (float):</strong>  Higher bound of data to keep to compute the RMSE. [0,1] &gt;= min_</li>\n<li><strong>num_to_drop (int):</strong>  Number of model to drop in the ensemble</li>\n<li><strong>mode (bool):</strong>  If True keeping the raw RMSE, if False keeping the RMSE scaled by max RMSE by Well</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index (int): Array of Index of the worst models in the ensemble, lenght of num_to_drop</p>\n</blockquote>\n", "parameters": ["measured", "observations", "min_", "max_", "num_to_drop", "mode"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.Measurements", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Measurements", "type": "function", "doc": "<p>Compute the covariance matrix and the measures with noise.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>measurements_vector (float):</strong>  Array of measures</li>\n<li><strong>measurements_error_percent (float):</strong>  Gaussian noise added to measures</li>\n<li><strong>number_of_ensemble (int):</strong>  Number of models in the ensemble</li>\n<li><strong>show_stats (bool):</strong>  If True print Measurement statistics (number of measures, mean, variance, std)</li>\n<li><strong>show_cov_matrix (bool):</strong>  If True, plot the Data matrix in the ensemble after the noise addition and plot the covariance matrix</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Cov (float): Covariance matrix between measures. Size number_of_ensemble * number_of_ensemble\n  D (np.matrix): Created ensemble of measures. Size number of measures * number_of_ensemble</p>\n</blockquote>\n", "parameters": ["measurements_vector", "measurements_error_percent", "number_of_ensemble", "show_stats", "show_cov_matrix"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.Assimilation", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Assimilation", "type": "class", "doc": "<p>Assimilation Class holds the methods and structure to assimilate the data.</p>\n\n<p>These methods are based on the publications of Patrick Nima Raanes</p>\n\n<p>--------------   Importing Ensemble dataset   --------------</p>\n\n<p>The ensemble matrix should be formated as each row\ncontained a parameter and each column a simulation</p>\n\n<p>If you run 100 simulations with 10 000 grid parameters\nto estimate, the ensemble matrix is of shape :</p>\n\n<p>(10 000, 100)</p>\n\n<p>--------------   Importing Observations Dataset   --------------</p>\n\n<p>The ensemble matrix should be formated as each row\ncontained one observation and each column a simulation</p>\n\n<p>To use an Ensemble Smoother you should update the model by\nassimilating all the data in one run. So you have to stack\nall the observed data in one matrix</p>\n\n<p>If you run 100 simulations, with 20 observations parameters\nat each timestep and 50 timestep, the observation matrix is of shape :</p>\n\n<p>1000 observations = 20 * 50</p>\n\n<p>(1000, 100)</p>\n\n<p>Observation matrix :</p>\n\n<p>|   observations at 1 time-step  |\n|   observations at 2 time-step   |\n|               .                |\n|               .                |\n| observations at last time-step |</p>\n\n<p>--------------   Importing Observations Localisation   --------------</p>\n\n<p>Each observation have to be localized in the grid parameters we are\nevaluating. For each observation we have to had the number of the\ncorresponding element in the grid.</p>\n\n<p>The localisation vector have to be the same length as the observation matrix.\nThis is possible to look at different point at each time-step. To allow this\nflexibilty user have to defined the complete vector himself. If this is only\nthe same point that are sampled in the gridat each time-step, the user can\nsimply repeat the observations vector for the number of timestep.</p>\n\n<p>In background, a sparse observation matrix will be build to allow computation\nbetween the parameters matrix and only the sampled points.</p>\n\n<p>If you run 100 simulations, with 20 observations parameters\nat each timestep and 50 timestep, the localisation vector is of shape :</p>\n\n<p>(1000, 1)</p>\n\n<p>Observation matrix :</p>\n\n<p>|   localisation of observations at 1 time-step  |\n|   localisation of observations at 2 time-ste   |\n|               .                |\n|               .                |\n| localisation of observations at last time-step |</p>\n"}, {"fullname": "Functions.Ensemble_Assimilation.Assimilation.__init__", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Assimilation.__init__", "type": "function", "doc": "<p>An Assimilation Class is initiated with all these parameters</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>ensemble_matrix (np.matrix):</strong>  Matrix holding all parameters of the ensemble. Size is number of parameters * number of ensemble</li>\n<li><strong>measurements_vector (np.matrix):</strong>  Matrix holding all measures with added noise in the ensembe. Size is number of measures * number of ensemble</li>\n<li><strong>observations_vector (np.matrix):</strong>  Matrix holding all observations in the ensembe. Size is number of observations * number of ensemble</li>\n<li><strong>measurements_error_percent (float):</strong>  Noise to add on measures to create the ensemble of measures.</li>\n<li><strong>inflation_factor = 1.01 (float):</strong>  Inflation factor to reduce the variance collapse</li>\n<li><strong>show_parameters = False (bool):</strong>  If True display ensemble informations (number of ensembe, number of parameter, number of measures, std of observations). Will also display usefull informations for debugging purpose, as all intermediate matrix.</li>\n</ul>\n", "parameters": ["self", "ensemble_matrix", "measurements_vector", "observations_vector", "measurements_error_percent", "inflation_factor", "show_parameters"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.Assimilation.pseudo_inverse", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Assimilation.pseudo_inverse", "type": "function", "doc": "<p>Compute a pseudo inverse matrix of the covariance anomalies matrix</p>\n\n<p>Iterative method retaining the best pseudo inverse between five regularizationa and five TSVD.\nThe number of iteration is hard coded in the function. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Store the pseudo_inverse in an attribute of Assimilation Class</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.Assimilation.stochastic", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Assimilation.stochastic", "type": "function", "doc": "<p>Compute the update on every parameters of the ensemble thanks to the assimilation process.</p>\n\n<p>The stochastic scheme is described by Patrick Nima Raanes.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Store the updated parameters in an attribute of Assimilation Class, Ea</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Ensemble_Assimilation.Assimilation.deterministic", "modulename": "Functions.Ensemble_Assimilation", "qualname": "Assimilation.deterministic", "type": "function", "doc": "<p>Compute the update on every parameters of the ensemble thanks to the assimilation process.</p>\n\n<p>The deterministic scheme is described by Geir Evensen.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Store the updated parameters in an attribute of Assimilation Class, Ea</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Feflow_Utils", "modulename": "Functions.Feflow_Utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Feflow_Utils.preEnterSimulator", "modulename": "Functions.Feflow_Utils", "qualname": "preEnterSimulator", "type": "function", "doc": "<p>Assigning parameters to Feflow before launching any simulation. Parameters are passed\nby global variables has defined in Feflow documentation. In this code, we send permKx,\npermKz and recharge issued from geostatistical simulations. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>doc (PyFeflowDoc):</strong>  Feflow Document imported with ifm.loadDocument(fem_file)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Wrong number of elements in _PERM_KX</li>\n<li><strong>ValueError:</strong>  Wrong number of elements in _PERM_KY</li>\n<li><strong>ValueError:</strong>  Wrong number of elements in _PERM_KZ</li>\n<li><strong>ValueError:</strong>  Wrong number of recharge in _RECHARGE</li>\n<li><strong>ValueError:</strong>  Wrong number of nodes while importing steady heads</li>\n</ul>\n", "parameters": ["doc"], "funcdef": "def"}, {"fullname": "Functions.Feflow_Utils.postTimeStep", "modulename": "Functions.Feflow_Utils", "qualname": "postTimeStep", "type": "function", "doc": "<p>Assigning parameters to Feflow before launching any simulation. Parameters are passed\nby global variables has defined in Feflow documentation. In this code, we send permKx,\npermKz and recharge issued from geostatistical simulations. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>doc (PyFeflowDoc):</strong>  Feflow Document imported with ifm.loadDocument(fem_file)</li>\n</ul>\n", "parameters": ["doc"], "funcdef": "def"}, {"fullname": "Functions.Feflow_Utils.check_launch_feflow", "modulename": "Functions.Feflow_Utils", "qualname": "check_launch_feflow", "type": "function", "doc": "<p>To avoid redoing lengthy simulation on already done one, we check the list of simulation to do\nversus the one already done. We also checked the existence of folders.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path_data (str):</strong>  Abolute path to the Data folder contained in the project</li>\n<li><strong>fem_steady_model (str):</strong>  Abolute path to the Feflow steady state model</li>\n<li><strong>fem_transient_model (str):</strong>  Abolute path to the Feflow transient state model</li>\n<li><strong>assim_number (int):</strong>  Actual assimilation step in the multiple data assimilation process</li>\n<li><strong>model_number (int):</strong>  Number of the model to be run in the actual simulation</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Individual_Update folder missing in Data/Assim_X/ folder</li>\n<li><strong>ValueError:</strong>  Head folder missing in Data/Assim_X/ folder</li>\n</ul>\n", "parameters": ["path_data", "fem_steady_model", "fem_transient_model", "assim_number", "model_number"], "funcdef": "def"}, {"fullname": "Functions.Feflow_Utils.launch_feflow", "modulename": "Functions.Feflow_Utils", "qualname": "launch_feflow", "type": "function", "doc": "<p>Functions to assign parameters to Feflow and run the simulation directly from Python.\nA lot of internal global variable are defined in accordance with Feflow documentation.\nThey follow a naming scheme to minimize risk of interference with other python file :\n_NAME_OF_INTERNAL_GLOBAL.</p>\n\n<p>First step is to assign parameters to the steady state Feflow model and running it. Hydraulic \nheads results are then stored as initial condition from the transient model run afterward. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path_data (str):</strong>  Abolute path to the Data folder contained in the project</li>\n<li><strong>fem_steady_model (str):</strong>  Abolute path to the Feflow steady state model</li>\n<li><strong>fem_transient_model (str):</strong>  Abolute path to the Feflow transient state model</li>\n<li><strong>assim_number (int):</strong>  Actual assimilation step in the multiple data assimilation process</li>\n<li><strong>model_number (int):</strong>  Number of the model to be run in the actual simulation</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Mising steady state Feflow model, check the name or file</li>\n<li><strong>ValueError:</strong>  Mising transient state Feflow model, check the name or file</li>\n</ul>\n", "parameters": ["path_data", "fem_steady_model", "fem_transient_model", "assim_number", "model"], "funcdef": "def"}, {"fullname": "Functions.Import_Data", "modulename": "Functions.Import_Data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Import_Data.Well", "modulename": "Functions.Import_Data", "qualname": "Well", "type": "class", "doc": "<p>Well class holds every data with corresponding time step, coordinates and name</p>\n"}, {"fullname": "Functions.Import_Data.Well.__init__", "modulename": "Functions.Import_Data", "qualname": "Well.__init__", "type": "function", "doc": "<p>A Well is initiated through a name, size and coordinates</p>\n", "parameters": ["self", "name", "size", "x", "y", "z"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.name", "modulename": "Functions.Import_Data", "qualname": "Well.name", "type": "variable", "doc": "<p>name (str): name of the well</p>\n"}, {"fullname": "Functions.Import_Data.Well.size", "modulename": "Functions.Import_Data", "qualname": "Well.size", "type": "variable", "doc": "<p>size (int): number of data points for the well</p>\n"}, {"fullname": "Functions.Import_Data.Well.time", "modulename": "Functions.Import_Data", "qualname": "Well.time", "type": "variable", "doc": "<p>time (datetime): Each timestep corresponding to a datapoint</p>\n"}, {"fullname": "Functions.Import_Data.Well.data", "modulename": "Functions.Import_Data", "qualname": "Well.data", "type": "variable", "doc": "<p>data (float): Each datapoint corresponding to a timestep</p>\n"}, {"fullname": "Functions.Import_Data.Well.x", "modulename": "Functions.Import_Data", "qualname": "Well.x", "type": "variable", "doc": "<p>x (float): x coordinate for the well</p>\n"}, {"fullname": "Functions.Import_Data.Well.y", "modulename": "Functions.Import_Data", "qualname": "Well.y", "type": "variable", "doc": "<p>y (float): y coordinate for the well</p>\n"}, {"fullname": "Functions.Import_Data.Well.z", "modulename": "Functions.Import_Data", "qualname": "Well.z", "type": "variable", "doc": "<p>z (float): z coordinate for the well</p>\n"}, {"fullname": "Functions.Import_Data.Well.set_data", "modulename": "Functions.Import_Data", "qualname": "Well.set_data", "type": "function", "doc": "<p>Function to reassign time and data to a Well object</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (float):</strong>  Each datapoint corresponding to a timestep</li>\n<li><strong>time (datetime):</strong>  Each timestep corresponding to a datapoint </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>Your value array size is different than the one defining this well. Data array should be the same size as self.size</li>\n</ul>\n", "parameters": ["self", "data", "time"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.set_data_index", "modulename": "Functions.Import_Data", "qualname": "Well.set_data_index", "type": "function", "doc": "<p>Function to reassign only one data or time index in a Well</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (float):</strong>  Data at the index position in the array to be replaced</li>\n<li><strong>time (datetime):</strong>  Time at the index position in the array to be replaced</li>\n<li><strong>index (int):</strong>  index in both array to replaced</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Your index is greater than the array size. Max index :</strong>  self.size</li>\n</ul>\n", "parameters": ["self", "data", "time", "index"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.show_well_description", "modulename": "Functions.Import_Data", "qualname": "Well.show_well_description", "type": "function", "doc": "<p>Print all Well informations (name,size,x,y,z)</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.show_well_data", "modulename": "Functions.Import_Data", "qualname": "Well.show_well_data", "type": "function", "doc": "<p>Print all Well data (time,data)</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.get_well_description", "modulename": "Functions.Import_Data", "qualname": "Well.get_well_description", "type": "function", "doc": "<p>Return all Well informations (name,size,x,y,z)</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>name, size, x, y, z</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.get_well_data", "modulename": "Functions.Import_Data", "qualname": "Well.get_well_data", "type": "function", "doc": "<p>Return all Well datas (time, data)</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>time, data</p>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Well.plot", "modulename": "Functions.Import_Data", "qualname": "Well.plot", "type": "function", "doc": "<p>Display the datas</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>x_size (float=8):</strong>  x dimension of the plot</li>\n<li><strong>y_size (float=4):</strong>  y dimension of the plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Display the plot</p>\n</blockquote>\n", "parameters": ["self", "x_size", "y_size"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Measure", "modulename": "Functions.Import_Data", "qualname": "Measure", "type": "class", "doc": "<p>Measure class holds every well measured on the field</p>\n"}, {"fullname": "Functions.Import_Data.Measure.__init__", "modulename": "Functions.Import_Data", "qualname": "Measure.__init__", "type": "function", "doc": "<p>path (str): path to the observation file produced by load_results()</p>\n", "parameters": ["self", "path"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Measure.nbr_obs_points", "modulename": "Functions.Import_Data", "qualname": "Measure.nbr_obs_points", "type": "variable", "doc": "<p>nbr_obs_points (int): Number of observations points in the model, corresponding to the amount of measures done on the field</p>\n"}, {"fullname": "Functions.Import_Data.Measure.wells", "modulename": "Functions.Import_Data", "qualname": "Measure.wells", "type": "variable", "doc": "<p>wells (Well): List of Well for each observation point</p>\n"}, {"fullname": "Functions.Import_Data.Observation", "modulename": "Functions.Import_Data", "qualname": "Observation", "type": "class", "doc": "<p>Observation class holds every well monitored during the simulation</p>\n"}, {"fullname": "Functions.Import_Data.Observation.__init__", "modulename": "Functions.Import_Data", "qualname": "Observation.__init__", "type": "function", "doc": "<p>path (str): path to the observation file produced by load_results()</p>\n", "parameters": ["self", "path"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.Observation.nbr_obs_points", "modulename": "Functions.Import_Data", "qualname": "Observation.nbr_obs_points", "type": "variable", "doc": "<p>nbr_obs_points (int): Number of observations points in the model, corresponding to the amount of measures done on the field</p>\n"}, {"fullname": "Functions.Import_Data.Observation.ensemble_size", "modulename": "Functions.Import_Data", "qualname": "Observation.ensemble_size", "type": "variable", "doc": "<p>ensemble_size (int): Number of models in the ensemble</p>\n"}, {"fullname": "Functions.Import_Data.Observation.wells", "modulename": "Functions.Import_Data", "qualname": "Observation.wells", "type": "variable", "doc": "<p>wells (Well): List of Well for each observation point in each model if the ensemble</p>\n"}, {"fullname": "Functions.Import_Data.load_results", "modulename": "Functions.Import_Data", "qualname": "load_results", "type": "function", "doc": "<p>Loading data in the folder path_data/ with the nth assim_number.\nData are formated to be given to the assimilation process</p>\n\n<p>Initial time is hardcoded in the fucntion </p>\n\n<p>/!\\ Don't forget to modify it</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>assim_number (int):</strong>  file path to your file containing all the observed data at each time step</li>\n<li><strong>path_data (str):</strong>  file path to the root file of the project</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Save all measures and observations in two text files in the path_data/Data/Assim_(assim_number)</p>\n</blockquote>\n", "parameters": ["assim_number", "path_data"], "funcdef": "def"}, {"fullname": "Functions.Import_Data.resample_time", "modulename": "Functions.Import_Data", "qualname": "resample_time", "type": "function", "doc": "<p>Take observations coming from FEFLOW and resampled them to a given time sampling\nTime sampling is hardcoded in the fucntion </p>\n\n<p>/!\\ Don't forget to modify it</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path_data (str):</strong>  file path to your file containing all the observed data at each time step</li>\n<li><strong>path_save (str):</strong>  path to the folder to store the resampled data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None: Save all resampled files in the path_save folder</p>\n</blockquote>\n", "parameters": ["path_data", "path_save"], "funcdef": "def"}, {"fullname": "Functions.Launch_Feflow", "modulename": "Functions.Launch_Feflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Localization_Methods", "modulename": "Functions.Localization_Methods", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Functions.Localization_Methods.get_ellipse_bb", "modulename": "Functions.Localization_Methods", "qualname": "get_ellipse_bb", "type": "function", "doc": "<p>Compute tight bounding box around ellipse of range major / minor</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>major (float):</strong>  ellipse range along long axis, positive value</li>\n<li><strong>minor (float):</strong>  ellipse range along short axis, positive value</li>\n<li><strong>angle_rad (float):</strong>  radian trigonometrical rotation, 0 along x, increase counter clockwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Union[float, float, float, float]: x_min, y_min, x_max, y_max</p>\n</blockquote>\n", "parameters": ["major", "minor", "angle_rad"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.validity_variogram", "modulename": "Functions.Localization_Methods", "qualname": "validity_variogram", "type": "function", "doc": "<p>Compute numerical validity of variogram model. Return an error if any fails</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>s (float):</strong>  sill, positive value</li>\n<li><strong>n (float):</strong>  nugget, positive value</li>\n<li><strong>r (float):</strong>  range, positive value</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Nugget effect, sill or range is negative, impossible</li>\n<li><strong>ValueError:</strong>  Nugget effect should be lower than sill</li>\n</ul>\n", "parameters": ["s", "n", "r"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.gaussian", "modulename": "Functions.Localization_Methods", "qualname": "gaussian", "type": "function", "doc": "<p>Compute variance on a gaussian variogram model given the sill, range, nugget and distance of observation. <br />\nFormula defined by Chiles and Delfiner 1999.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>s (float):</strong>  sill, positive value</li>\n<li><strong>n (float):</strong>  nugget, positive value</li>\n<li><strong>r (float):</strong>  range, positive value</li>\n<li><strong>h (float):</strong>  distance, could be single value or a vector of several point to compute) </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: variance, single value or vector of values in function of the type of h</p>\n</blockquote>\n", "parameters": ["s", "n", "r", "h"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.exponential", "modulename": "Functions.Localization_Methods", "qualname": "exponential", "type": "function", "doc": "<p>Compute variance on an exponential variogram model given the sill, range, nugget and distance of observation. <br />\nFormula defined by Chiles and Delfiner 1999.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>s (float):</strong>  sill, positive value</li>\n<li><strong>n (float):</strong>  nugget, positive value</li>\n<li><strong>r (float):</strong>  range, positive value</li>\n<li><strong>h (float):</strong>  distance, could be single value or a vector of several point to compute) </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: variance, single value or vector of values in function of the type of h</p>\n</blockquote>\n", "parameters": ["s", "n", "r", "h"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.spherical", "modulename": "Functions.Localization_Methods", "qualname": "spherical", "type": "function", "doc": "<p>Compute variance on a spherical variogram model given the sill, range, nugget and distance of observation. <br />\nFormula defined by Chiles and Delfiner 1999.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>s (float):</strong>  sill, positive value</li>\n<li><strong>n (float):</strong>  nugget, positive value</li>\n<li><strong>r (float):</strong>  range, positive value</li>\n<li><strong>h (float):</strong>  distance, could be single value or a vector of several point to compute) </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: variance, single value or vector of values in function of the type of h</p>\n</blockquote>\n", "parameters": ["s", "n", "r", "h"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.get_elements_ellipsoid", "modulename": "Functions.Localization_Methods", "qualname": "get_elements_ellipsoid", "type": "function", "doc": "<p>Computes an observation weight for each point in a ellispoid around\na given center and ellipse geometry. Weight equal at 1 on observation point, decaying\nfollowing the given model, to the nugget on the ellispe boundary and outside. </p>\n\n<p>It is used has localization method to improve numerical stability in further inversion and \nreduces spurrious correlations. Take 3 vectors x, y, z containing coordinate of Feflow elements. \nCombined with ellipse geometry, it returned index of element inside the ellipse and the weight \nassociated with every Feflow element.</p>\n\n<p>Numerical implementation required to pass by a local coordinate system centered on observation\npoint, and rotation along dip and azimuth to use ellispoid axis as system axis.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  containing the coordinates X,Y,Z and the ElementId as </li>\n<li>columns of Dataframe.</li>\n<li><strong>max_range (float):</strong>  maximum range of observation weight along the ellipsoid axis</li>\n<li><strong>med_range (float):</strong>  medium range of observation weight along the ellipsoid axis</li>\n<li><strong>min_range (float):</strong>  minimum range of observation weight along the ellipsoid axis</li>\n<li><strong>dip (float):</strong>  Angle in radian of max_range on an vertical plane, with 0 correpsonding to no dip,\nranging from 0 to -pi/2, negative value to the center of earth</li>\n<li><strong>azimuth (float):</strong>  Angle in radian of max_range on an horizontal plane, with 0 pointing to north,\nranging from 0 to 2pi clockwise</li>\n<li><strong>x_c (float):</strong>  x cell coordinate center of the observed cell</li>\n<li><strong>y_c (float):</strong>  y cell coordinate center of the observed cell</li>\n<li><strong>z_c (float):</strong>  z cell coordinate center of the observed cell</li>\n<li><strong>sill (float):</strong>  Equivalent to the sill in variogram, giving a weight to points around observation \npoint</li>\n<li><strong>nugget (float):</strong>  Equivalent to the nugget in variogram, giving a random noise weight to points around \nobservation point</li>\n<li><strong>model (str):</strong>  Variogram model type used to compute the weight decay in the ellipsoid. \"gaussian\", \n\"exponential\" or \"spherical\". Models defined by Chiles and Delfiner 1999.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index (int): Indexes of Feflow element inside the research ellispoid, \n      values (float): Observation weight associated to elements in index</p>\n</blockquote>\n", "parameters": ["data", "max_range", "med_range", "min_range", "dip", "azimuth", "x_c", "y_c", "z_c", "sill", "nugget", "model"], "funcdef": "def"}, {"fullname": "Functions.Localization_Methods.extract_feflow_from_ellipsoid", "modulename": "Functions.Localization_Methods", "qualname": "extract_feflow_from_ellipsoid", "type": "function", "doc": "<p>Computes an observation weight for each elements in a Feflow model. Weight is equal to 1 \non observation point, decaying following the range and type of  variogram model. Outside \nof the range, the weight is equal to the nugget. </p>\n\n<p>It is used has localization method to improve numerical stability in further inversion and \nreduces spurrious correlations. Take 4 vectors x, y, z and elementID of Feflow elements. \nCombined with variogram geomtry, it returned index of elements inside the range and the weight \nassociated with every Feflow element.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  containing reindex from 0 to n_element, the coordinates X,Y,Z and </li>\n<li><strong>the ElementId as columns of Dataframe. Columns name :</strong>  index, X, Y, Z, ElementId</li>\n<li><strong>x_obs (float):</strong>  x coordinate of observed point in Feflow model reference coordinate</li>\n<li><strong>y_obs (float):</strong>  y coordinate of observed point in Feflow model reference coordinate</li>\n<li><strong>z_obs (float):</strong>  z coordinate of observed point in Feflow model reference coordinate</li>\n<li><strong>max_range (float):</strong>  maximum range of observation weight along the ellipsoid axis</li>\n<li><strong>med_range (float):</strong>  medium range of observation weight along the ellipsoid axis</li>\n<li><strong>min_range (float):</strong>  minimum range of observation weight along the ellipsoid axis</li>\n<li><strong>azimuth (float):</strong>  Angle in degree of max_range on an horizontal plane with the north,\n0 degree is a pure northern azimut. Ranging from 0 to 360 degrees clockwise\n/ ! \\ Degrees increases opposite to trigonometric way. Real world map convention</li>\n<li><strong>dip (float):</strong>  Angle in degree of max_range on an vertical plane, with 0 correpsonding to no dip,\nranging from 0 to -90, -90 is pointing to the earth center</li>\n<li><strong>sill (float):</strong>  Equivalent to the sill in variogram, giving a weight to points around observation \npoint</li>\n<li><strong>nugget (float):</strong>  Equivalent to the nugget in variogram, giving a random noise weight to points around \nobservation point</li>\n<li><strong>model (str):</strong>  Variogram model type used to compute the weight decay in the ellipsoid. \"gaussian\", \n\"exponential\" or \"spherical\". Models defined by Chiles and Delfiner 1999.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Azimuth should be in radian between 0 and 2 pi</li>\n<li><strong>ValueError:</strong>  Dip should be in radian between 0 and -pi/2</li>\n<li><strong>ValueError:</strong>  Wrong variogram model, should be gaussian, spherical or exponential</li>\n<li><strong>ValueError:</strong>  Dataframe coordinates columns should be named exactly X,Y,Z</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index (int): Indexes of Feflow element inside the research ellispoid, \n      values (float): Observation weight associated to elements in index</p>\n</blockquote>\n", "parameters": ["data", "x_obs", "y_obs", "z_obs", "max_range", "med_range", "min_range", "azimuth", "dip", "sill", "nugget", "model"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();